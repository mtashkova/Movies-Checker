// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/go.uuid"
	database "github.tools.sap/distribution-store/moovies/pkg/database"
	reflect "reflect"
)

// MockMovieDAO is a mock of MovieDAO interface
type MockMovieDAO struct {
	ctrl     *gomock.Controller
	recorder *MockMovieDAOMockRecorder
}

// MockMovieDAOMockRecorder is the mock recorder for MockMovieDAO
type MockMovieDAOMockRecorder struct {
	mock *MockMovieDAO
}

// NewMockMovieDAO creates a new mock instance
func NewMockMovieDAO(ctrl *gomock.Controller) *MockMovieDAO {
	mock := &MockMovieDAO{ctrl: ctrl}
	mock.recorder = &MockMovieDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMovieDAO) EXPECT() *MockMovieDAOMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockMovieDAO) Insert(ctx context.Context, movie database.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, movie)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockMovieDAOMockRecorder) Insert(ctx, movie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockMovieDAO)(nil).Insert), ctx, movie)
}

// Read mocks base method
func (m *MockMovieDAO) Read(ctx context.Context, title string) (database.Movie, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, title)
	ret0, _ := ret[0].(database.Movie)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Read indicates an expected call of Read
func (mr *MockMovieDAOMockRecorder) Read(ctx, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockMovieDAO)(nil).Read), ctx, title)
}

// Delete mocks base method
func (m *MockMovieDAO) Delete(ctx context.Context, rate int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockMovieDAOMockRecorder) Delete(ctx, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMovieDAO)(nil).Delete), ctx, rate)
}

// MockUUIDGenerator is a mock of UUIDGenerator interface
type MockUUIDGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockUUIDGeneratorMockRecorder
}

// MockUUIDGeneratorMockRecorder is the mock recorder for MockUUIDGenerator
type MockUUIDGeneratorMockRecorder struct {
	mock *MockUUIDGenerator
}

// NewMockUUIDGenerator creates a new mock instance
func NewMockUUIDGenerator(ctrl *gomock.Controller) *MockUUIDGenerator {
	mock := &MockUUIDGenerator{ctrl: ctrl}
	mock.recorder = &MockUUIDGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUUIDGenerator) EXPECT() *MockUUIDGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method
func (m *MockUUIDGenerator) Generate() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// Generate indicates an expected call of Generate
func (mr *MockUUIDGeneratorMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockUUIDGenerator)(nil).Generate))
}
